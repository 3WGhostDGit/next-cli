/**
 * Test du template de base de donn√©es
 * Valide la g√©n√©ration et la coh√©rence des fichiers
 */

import { generateCompleteDatabase } from "./generator";
import { examples } from "./example";

/**
 * Test de g√©n√©ration basique
 */
function testBasicGeneration() {
  console.log("üß™ Test de g√©n√©ration basique...");

  const config = examples.postgresql();
  const result = generateCompleteDatabase(config, {
    includeExamples: true,
    includeMigrations: true,
    includeTests: true,
  });

  // V√©rifications de base
  console.assert(result.files.length > 0, "‚ùå Aucun fichier g√©n√©r√©");
  console.assert(Object.keys(result.packageScripts).length > 0, "‚ùå Aucun script g√©n√©r√©");
  console.assert(Object.keys(result.dependencies).length > 0, "‚ùå Aucune d√©pendance g√©n√©r√©e");
  console.assert(result.instructions.length > 0, "‚ùå Aucune instruction g√©n√©r√©e");

  console.log(`‚úÖ ${result.files.length} fichiers g√©n√©r√©s`);
  console.log(`‚úÖ ${Object.keys(result.packageScripts).length} scripts g√©n√©r√©s`);
  console.log(`‚úÖ ${Object.keys(result.dependencies).length} d√©pendances g√©n√©r√©es`);
}

/**
 * Test de validation des fichiers g√©n√©r√©s
 */
function testFileValidation() {
  console.log("\nüîç Test de validation des fichiers...");

  const config = examples.postgresql();
  const result = generateCompleteDatabase(config);

  // Fichiers obligatoires
  const requiredFiles = [
    "prisma/schema.prisma",
    "src/lib/db.ts",
    "shared/types/database.ts",
    "shared/validation/database.ts",
  ];

  requiredFiles.forEach(filePath => {
    const file = result.files.find(f => f.path === filePath);
    console.assert(file, `‚ùå Fichier manquant: ${filePath}`);
    console.assert(file?.content.length > 0, `‚ùå Fichier vide: ${filePath}`);
  });

  console.log("‚úÖ Tous les fichiers obligatoires sont pr√©sents");
}

/**
 * Test de coh√©rence du sch√©ma Prisma
 */
function testPrismaSchemaConsistency() {
  console.log("\nüìä Test de coh√©rence du sch√©ma Prisma...");

  const config = examples.postgresql();
  const result = generateCompleteDatabase(config);

  const schemaFile = result.files.find(f => f.path === "prisma/schema.prisma");
  console.assert(schemaFile, "‚ùå Schema Prisma manquant");

  const schemaContent = schemaFile!.content;

  // V√©rifications du contenu
  console.assert(schemaContent.includes("generator client"), "‚ùå Generator client manquant");
  console.assert(schemaContent.includes("datasource db"), "‚ùå Datasource manquant");
  console.assert(schemaContent.includes("provider = \"postgresql\""), "‚ùå Provider incorrect");

  if (config.models.user) {
    console.assert(schemaContent.includes("model User"), "‚ùå Mod√®le User manquant");
  }

  if (config.validation.useZodPrismaTypes) {
    console.assert(schemaContent.includes("generator zod"), "‚ùå Generator Zod manquant");
  }

  console.log("‚úÖ Sch√©ma Prisma coh√©rent");
}

/**
 * Test de validation Zod
 */
function testZodValidation() {
  console.log("\nüõ°Ô∏è Test de validation Zod...");

  const config = examples.postgresql();
  config.validation.useZodPrismaTypes = true;
  
  const result = generateCompleteDatabase(config);

  const validationFile = result.files.find(f => f.path === "shared/validation/database.ts");
  console.assert(validationFile, "‚ùå Fichier de validation manquant");

  const validationContent = validationFile!.content;
  console.assert(validationContent.includes("import { z }"), "‚ùå Import Zod manquant");
  console.assert(validationContent.includes("emailSchema"), "‚ùå Schema email manquant");
  console.assert(validationContent.includes("idSchema"), "‚ùå Schema ID manquant");

  console.log("‚úÖ Validation Zod configur√©e");
}

/**
 * Test des extensions Prisma
 */
function testPrismaExtensions() {
  console.log("\nüîß Test des extensions Prisma...");

  const config = examples.postgresql();
  config.features = ["extensions", "soft-delete", "audit-trail"];
  
  const result = generateCompleteDatabase(config);

  const extensionFiles = result.files.filter(f => f.path.startsWith("prisma/extensions/"));
  console.assert(extensionFiles.length > 0, "‚ùå Aucune extension g√©n√©r√©e");

  const mainExtension = result.files.find(f => f.path === "prisma/extensions/index.ts");
  console.assert(mainExtension, "‚ùå Extension principale manquante");

  if (config.features.includes("soft-delete")) {
    const softDeleteExt = result.files.find(f => f.path === "prisma/extensions/soft-delete.ts");
    console.assert(softDeleteExt, "‚ùå Extension soft-delete manquante");
  }

  console.log("‚úÖ Extensions Prisma g√©n√©r√©es");
}

/**
 * Test des diff√©rentes bases de donn√©es
 */
function testDatabaseSupport() {
  console.log("\nüóÑÔ∏è Test du support multi-base de donn√©es...");

  const databases = ["postgresql", "mysql", "sqlite", "mongodb"] as const;

  databases.forEach(db => {
    const config = examples.postgresql();
    config.database = db;
    
    const result = generateCompleteDatabase(config);
    
    const schemaFile = result.files.find(f => f.path === "prisma/schema.prisma");
    console.assert(schemaFile, `‚ùå Schema manquant pour ${db}`);
    console.assert(
      schemaFile!.content.includes(`provider = "${db}"`),
      `‚ùå Provider incorrect pour ${db}`
    );
  });

  console.log("‚úÖ Support multi-base de donn√©es valid√©");
}

/**
 * Test des scripts package.json
 */
function testPackageScripts() {
  console.log("\nüì¶ Test des scripts package.json...");

  const config = examples.postgresql();
  const result = generateCompleteDatabase(config);

  const requiredScripts = [
    "db:generate",
    "db:migrate",
    "db:push",
    "db:studio",
    "db:seed",
  ];

  requiredScripts.forEach(script => {
    console.assert(
      result.packageScripts[script],
      `‚ùå Script manquant: ${script}`
    );
  });

  console.log("‚úÖ Scripts package.json g√©n√©r√©s");
}

/**
 * Test de performance et optimisation
 */
function testPerformanceGeneration() {
  console.log("\n‚ö° Test de performance de g√©n√©ration...");

  const startTime = Date.now();
  
  // G√©n√©rer plusieurs configurations
  const configs = [
    examples.postgresql(),
    examples.sqlite(),
    examples.mysql(),
    examples.mongodb(),
  ];

  configs.forEach((config, index) => {
    const result = generateCompleteDatabase(config, {
      includeExamples: true,
      includeMigrations: true,
      includeTests: true,
    });
    
    console.assert(result.files.length > 0, `‚ùå √âchec g√©n√©ration ${index}`);
  });

  const endTime = Date.now();
  const duration = endTime - startTime;

  console.log(`‚úÖ G√©n√©ration de ${configs.length} configurations en ${duration}ms`);
  console.assert(duration < 5000, "‚ùå G√©n√©ration trop lente (>5s)");
}

/**
 * Ex√©cute tous les tests
 */
function runAllTests() {
  console.log("üöÄ D√©marrage des tests du template de base de donn√©es\n");

  try {
    testBasicGeneration();
    testFileValidation();
    testPrismaSchemaConsistency();
    testZodValidation();
    testPrismaExtensions();
    testDatabaseSupport();
    testPackageScripts();
    testPerformanceGeneration();

    console.log("\nüéâ Tous les tests sont pass√©s avec succ√®s!");
    return true;
  } catch (error) {
    console.error("\nüí• √âchec des tests:", error);
    return false;
  }
}

/**
 * Test de d√©monstration
 */
function demonstrateTemplate() {
  console.log("\nüìã D√©monstration du template...");
  
  const demo = examples.demonstrate();
  
  console.log("Configurations g√©n√©r√©es:");
  Object.entries(demo).forEach(([name, { config, template }]) => {
    console.log(`- ${name}: ${template.files.length} fichiers, ${Object.keys(template.dependencies).length} d√©pendances`);
  });
}

// Exporter les fonctions de test
export {
  runAllTests,
  demonstrateTemplate,
  testBasicGeneration,
  testFileValidation,
  testPrismaSchemaConsistency,
  testZodValidation,
  testPrismaExtensions,
  testDatabaseSupport,
  testPackageScripts,
  testPerformanceGeneration,
};

// Ex√©cuter les tests si ce fichier est ex√©cut√© directement
if (require.main === module) {
  const success = runAllTests();
  demonstrateTemplate();
  process.exit(success ? 0 : 1);
}
